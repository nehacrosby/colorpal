<html>
  <head>
    <title>Color Math</title>
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
    <script type="text/javascript" src="jquery.xcolor.js"></script>
    <script type="text/javascript" src="jquery.color.js"></script>
    <script type="text/javascript">
    var paletteColorTuple = $.xcolor.test("rgb(255, 0, 0)"),
        ctx = null,
        canvasWidth = null,
      	colorRed = $.xcolor.test("rgb(255, 0, 0)"),
      	colorGreen = $.xcolor.test("rgb(0, 255, 0)"),
      	colorBlue = $.xcolor.test("rgb(0, 0, 255)"),
      	colorYellow = $.xcolor.test("rgb(255, 255, 0)");
        
    // TODO: Fix the flood-fill for outside the boundary of image.
    // TODO: Need to differentitate white from erase.
     $(document).ready(function() {
       // Add all the click handlers.
       $("div.palette-square").click(onPaletteClick);
       $('#tutorial').click(onCanvasClick);
       canvas = $('#tutorial')[0];
       
       if (canvas.getContext) {
         ctx = canvas.getContext('2d');
         canvasWidth = ctx.canvas.width;
         drawShapes();
       }
      });
      
      // Picks an image and draws it on canvas.
      function drawShapes() {
        // Fill the background with white then draw an image on top.
        ctx.fillStyle = "rgb(255, 255, 255)";
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

        // Draw the shape now.
        var img = new Image();
        img.src = 'images/heart.png';
        img.onload = function(){
          ctx.drawImage(img, 0, 0);
          
          // Hard-coded black boundary color.
          boundaryColor = $.xcolor.test("rgb(0, 0, 0)");
        }
       }
     		         
       // Add click handlers.
       // Pick up the color.
       function onPaletteClick() {
		     // Pick up the color and on next click use this color
		     // to fill the region.
		     paletteColorTuple = $.xcolor.test($(this).css("background-color"));
		     console.log(paletteColorTuple);
		   }
		   
		   // Get x, y coordinates of the mouse-click
		   // and start flood-fill of the color from there.
		   function onCanvasClick(event) {
        var canvas = $('#tutorial')[0];
          x = event.pageX - canvas.offsetLeft,
          y = event.pageY - canvas.offsetTop;
          floodFill(x, y);
       }
       
       function floodFill(x, y) {
         console.log("floodfill")
         // Create an ImageData object.
         var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

         // Stack stores the (x, y) coordinates of the pixel to color.
         floodfillStack = [];
         // TODO: Handle the case when pallete color is not defined.
         console.log("starting floodfill " + x + "," + y);     
         window.fillCalled = 0;
         window.isBoundaryCalled = 0;

         fillPixel(x, y, imageData.data);
         var duration = time(function() {
           while(floodfillStack.length > 0) {
             toFill = floodfillStack.pop();
             fillPixel(toFill[0], toFill[1], imageData.data);
             if (fillCalled > 1000) return;
           }
         });
         console.log("flood fill took", duration, "ms");
         console.log("filled:", window.fillCalled);
         console.log("isBoundary:", window.isBoundaryCalled);
         ctx.putImageData(imageData, 0, 0);
       }
       
       // Fills the pixel with paletteColor if it is not boundary pixel.
       function fillPixel(x, y, pixelData) {
       	if(!isBoundary(x, y, pixelData)) fill(x, y, pixelData);

       	if(!isBoundary(x, y-1, pixelData)) floodfillStack.push([x, y-1]);
       	if(!isBoundary(x+1, y, pixelData)) floodfillStack.push([x+1, y]);
       	if(!isBoundary(x, y+1, pixelData)) floodfillStack.push([x, y+1]);
       	if(!isBoundary(x-1, y, pixelData)) floodfillStack.push([x-1, y]);
       }
       // Helper method that changes the color of pixel 'x, y' to
       // whatever paletteColorTuple is set to.
       function fill(x, y, pixelData) {
         fillCalled++;
         var offset = pixelOffset(x, y);
         pixelData[offset] = paletteColorTuple.r;
         pixelData[offset + 1] = paletteColorTuple.g;
         pixelData[offset + 2] = paletteColorTuple.b;
       }
       
       // Returns the index of pixel at (x,y) into the pixel array returned by getImageData().
       function pixelOffset(x, y) { return (y * canvasWidth + x) * 4; }
       
       // Returns ture if the x, y coordinates are boundary pixels
       // or pixels of the same color as the fill color or we've reached
      // the end of the canvas.
       function isBoundary(x, y, pixelData) {
         var offset = pixelOffset(x, y);
         return 
           ((pixelData[offset] == boundaryColor.r &&
           pixelData[offset + 1] == boundaryColor.g &&
           pixelData[offset + 2] == boundaryColor.b) ||
           (pixelData[offset] == paletteColorTuple.r &&
            pixelData[offset + 1] == paletteColorTuple.g &&
            pixelData[offset + 2] == paletteColorTuple.b));
         // outsideCanvas(x, y));
       }
       
       function outsideCanvas(x, y) {
         return (x <= canvas.offsetLeft) ||
                (y <= canvas.offsetTop) ||
                (x >= canvas.offsetLeft + canvasWidth) ||
                (y >= canvas.offsetTop + canvasHeight);
        }
       
       function time(fn) {
         var time = Date.now();
         fn();
         return Date.now() - time;
       }

      function benchmark(fn) {
        time(function() {
          for (var i = 0; i < 100000; i++)
          fn();
        });
      }
       
      </script>
    <style type="text/css">
      canvas { 
        border: 2px solid red; 
      }

	  .palette-square {
	    width:40px;
		  height:40px;
		  border:1px solid black;
		  float:left;
	  }
	
    #blue { 
		  background-color: #0000FF;
	  }
	
   	#red { 
		  background-color: #FF0000;
	  }
	
	  #yellow { 
		  background-color: #FFFF00;
	  }
	  #clear { 
  		background-color: #FFFFFF;
  	}
    </style>
  </head>
  <body>
	
	<!-- Provide the Palette -->
	<div class="palette-square" id="blue"></div>
	<div class="palette-square" id="red"></div>
	<div class="palette-square" id="yellow"></div>
	<div class="palette-square" id="clear"></div>
	<br>
	<!-- Draw the canvas-->
    <canvas id="tutorial" width="800" height="600"></canvas>
  </body>
</html>